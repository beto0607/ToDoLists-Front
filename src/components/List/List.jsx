//@author: beto0607
//generated by create_container

import React, { useState } from "react";

import styles from "./List.module.scss";
import { confirmAlert } from "react-confirm-alert"; // Import
import "react-confirm-alert/src/react-confirm-alert.css"; // Import css

import { Item, ItemCreate } from "../Item";
import LoadingSpinner from "../LoadingSpinner";
import {
    doGET,
    getListItemsURL,
    doDELETE,
    getListURL
} from "../../utils/utils";
import {
    FaExpandArrowsAlt,
    FaCompressArrowsAlt,
    FaTrashAlt
} from "react-icons/fa";
const ListInfo = ({
    title,
    due_date,
    description,
    items_done_count,
    items_count,
    opened,
    list_id
}) => {
    due_date =
        "Due date: " +
        (due_date ? new Date(due_date).toDateString() : "<empty>");
    if (description) {
        description =
            "Description: " +
            (opened //If it's opened, show the whole description. If not, only the first 120 chars.
                ? description
                : description.substr(0, 120) +
                  (description.length > 120 && "...")); //If originally it has more than 120 chars, add an ellipsis
    }
    return (
        <div>
            <strong>
                #{list_id + " "}
                {title}
            </strong>
            <span>{due_date}</span>
            <span>Items: {`${items_done_count}/${items_count}`}</span>
            {description && <p>{description}</p>}
        </div>
    );
};
const ListDelete = ({ list_id, onListDeleted, onError }) => {
    const handleDeleteClick = () => {
        confirmAlert({
            title: "Are you sure?",
            message: `This action will remove #${list_id} list permanently.`,
            buttons: [
                {
                    label: "Yes",
                    onClick: () => {
                        doDELETE(
                            getListURL(list_id),
                            () => onListDeleted(list_id),
                            onError
                        );
                    }
                },
                {
                    label: "No"
                }
            ]
        });
    };
    return (
        <div className={styles["delete-container"]} onClick={handleDeleteClick}>
            <FaTrashAlt />
        </div>
    );
};
export const List = ({ onListDeleted, onError, attributes, id }) => {
    const [state, setState] = useState({
        opened: "",
        items_count: attributes.items_count,
        loadingItems: false,
        items: []
    });
    const handleClick = e => {
        //Clicked on delete-icon
        if (e.target.closest("." + styles["delete-container"])) return;
        if (!state.opened) {
            //is closed
            setState({ ...state, loadingItems: true, opened: "opened" }); //Opens the list
            //Load items and open the list
            doGET(
                getListItemsURL(id),
                data => {
                    setState({
                        ...state,
                        items: data.data,
                        items_count: attributes.items_count,
                        loadingItems: false,
                        opened: "opened"
                    });
                },
                onError
            );
            return;
        }
        //is opend
        if (e.target.closest("." + styles["toggle-icon-container"])) {
            //and clicked in toggle-icon
            setState({ ...state, opened: "", loadingItems: false }); //Close
            // setState({ ...state, opened: state.opened ? "" : "opened" });
        }
    };
    return (
        <div
            className={styles["list-container"] + " " + styles[state.opened]}
            onClick={handleClick}>
            <div className={styles["toggle-icon-container"]}>
                {state.opened ? <FaCompressArrowsAlt /> : <FaExpandArrowsAlt />}
            </div>
            <ListDelete
                list_id={id}
                onListDeleted={onListDeleted}
                onError={onError}
            />
            <ListInfo
                {...attributes}
                list_id={id}
                items_count={state.items_count}
                opened={state.opened}
            />

            {state.opened && (
                <div>
                    {state.loadingItems && <LoadingSpinner />}
                    <ul>
                        <ItemCreate
                            list_id={id}
                            onCreate={data => {
                                setState({
                                    ...state,
                                    items: [...state.items, data.data],
                                    items_count: state.items_count + 1
                                });
                            }}
                            onError={onError}
                        />
                        {state.items.map(element => (
                            <Item
                                key={`Item#${element.id}`}
                                {...element}
                                onError={onError}
                                onDeleteItem={id => {
                                    setState({
                                        ...state,
                                        items: [
                                            ...state.items.filter(
                                                e => e.id !== id
                                            )
                                        ],
                                        items_count: state.items_count - 1
                                    });
                                }}
                            />
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};
