//@author: beto0607
//generated by create_container

import React from "react";
import styles from "./List.module.scss";
import { confirmAlert } from "react-confirm-alert"; // Import
import "react-confirm-alert/src/react-confirm-alert.css"; // Import css

//import ListItem from "../ListItem";
import LoadingSpinner from "../LoadingSpinner";

import {
  FaExpandArrowsAlt,
  FaCompressArrowsAlt,
  FaTrashAlt
} from "react-icons/fa";

class List extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      opened: false,
      loadingItems: false
    };
    this.items = null;
    this.close = this.close.bind(this);
    this.handleClickDiv = this.handleClickDiv.bind(this);
    this.handleDeleteClick = this.handleDeleteClick.bind(this);
    this.loadingRef = React.createRef();
  }
  handleClickDiv(e) {
    this.props.closeLists();
    if (
      !e.target.closest("." + styles["delete-container"]) && //Not pressed delete-container or child
      (!this.state.opened || //List is close
        e.target.closest("." + styles["icon-container"])) //Not pressed icon-container or child
    ) {
      let newState = {
        opened: !this.state.opened
      };
      if (!this.items ) {
        this.loadItems();
      }
      this.setState(newState);
    }
  }
  loadItems() {
    setTimeout(
      () => {
          this.setState({loadingItems: true});
        },
      1000,
      this
    );
  }
  handleDeleteClick(e) {
    confirmAlert({
      title: "Are you sure?",
      message: `This action will remove #${this.props.id} list permanently.`,
      buttons: [
        {
          label: "Yes",
          onClick: () => this.removeList()
        },
        {
          label: "No"
        }
      ]
    });
  }
  removeList() {
    fetch(this.props.base_url + "lists/" + this.props.id, {
      method: "DELETE",
      headers: this.props.authorization_header
    }).then(response => {
      if (response.status === 204) {
        this.props.listRemoved(this.props.id);
      } else {
        console.log(response);
      }
    });
  }
  close() {
    this.setState({
      opened: false
    });
  }
  render() {
      //console.log(this.state.loadingItems);
      
    const {
      title,
      due_date,
      description,
      items_done_count,
      items_count
    } = this.props.attributes;
    return (
      <div
        className={
          styles["list-container"] +
          " " +
          (this.state.opened && styles["opened"])
        }
        onClick={this.handleClickDiv}>

        <div className={styles["icon-container"]}>
          {this.state.opened ? <FaCompressArrowsAlt /> : <FaExpandArrowsAlt />}
        </div>

        <div
          className={styles["delete-container"]}
          onClick={this.handleDeleteClick}>
          <FaTrashAlt />
        </div>

        <strong>{title}</strong>

        <span>
          Due date:
          {" " + (due_date ? new Date(due_date).toDateString() : "<empty>")}
        </span>

        <span>Items: {`${items_done_count}/${items_count}`}</span>

        {description && (
          <p>
            Description:{" "}
            {description.substr(0, 120) + (description.length > 120 && "...")}
          </p>
        )}

        <div>
            <LoadingSpinner isShowing={this.state.loadingItems}/>
        </div>
      </div>
    );
  }
}
export default List;
