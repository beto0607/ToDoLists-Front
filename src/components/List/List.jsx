//@author: beto0607
//generated by create_container

import React, { useState } from "react";

import styles from "./List.module.scss";
import { confirmAlert } from "react-confirm-alert"; // Import
import "react-confirm-alert/src/react-confirm-alert.css"; // Import css

import { Item, ItemCreate } from "../Item";
import LoadingSpinner from "../LoadingSpinner";
import {
    doGET,
    getListItemsURL,
    doDELETE,
    getListURL
} from "../../utils/utils";
import {
    FaExpandArrowsAlt,
    FaCompressArrowsAlt,
    FaTrashAlt
} from "react-icons/fa";
const ListInfo = ({
    title,
    due_date,
    description,
    items_done_count,
    items_count,
    opened, 
    list_id
}) => {
    due_date =
        "Due date: " +
        (due_date ? new Date(due_date).toDateString() : "<empty>");
    if (description) {
        description =
            "Description: " +
            (opened //If it's opened, show the whole description. If not, only the first 120 chars.
                ? description
                : description.substr(0, 120) +
                  (description.length > 120 && "...")); //If originally it has more than 120 chars, add an ellipsis
    }
    return (
        <div>
            <strong>#{list_id+" "}{title}</strong>
            <span>{due_date}</span>
            <span>Items: {`${items_done_count}/${items_count}`}</span>
            {description && <p>{description}</p>}
        </div>
    );
};
const ListDelete = ({ list_id, onListDeleted, onError }) => {
    const handleDeleteClick = () => {
        confirmAlert({
            title: "Are you sure?",
            message: `This action will remove #${list_id} list permanently.`,
            buttons: [
                {
                    label: "Yes",
                    onClick: () => {
                        doDELETE(getListURL(list_id), onListDeleted, onError);
                    }
                },
                {
                    label: "No"
                }
            ]
        });
    };
    return (
        <div className={styles["delete-container"]} onClick={handleDeleteClick}>
            <FaTrashAlt />
        </div>
    );
};
export const List = ({ onListDeleted, onError, attributes, id }) => {
    const [state, setState] = useState({
        opened: "",
        items_count: attributes.items_count,
        loadingItems: false,
        items: []
    });
    const handleClick = e => {
        //Clicked on delete-icon
        if (e.target.closest("." + styles["delete-container"])) return;
        if (!state.opened) {
            //is closed
            setState({ ...state, loadingItems: true, opened: "opened" }); //Opens the list
            //Load items and open the list
            doGET(
                getListItemsURL(id),
                data => {
                    setState({
                        ...state,
                        items: data.data,
                        items_count: attributes.items_count,
                        loadingItems: false,
                        opened: "opened"
                    });
                },
                onError
            );
            return;
        }
        //is opend
        if (e.target.closest("." + styles["toggle-icon-container"])) {
            //and clicked in toggle-icon
            setState({ ...state, opened: "", loadingItems: false }); //Close
            // setState({ ...state, opened: state.opened ? "" : "opened" });
        }
    };
    return (
        <div
            className={styles["list-container"] + " " + styles[state.opened]}
            onClick={handleClick}>
            <div className={styles["toggle-icon-container"]}>
                {state.opened ? <FaCompressArrowsAlt /> : <FaExpandArrowsAlt />}
            </div>
            <ListDelete
                list_id={id}
                onListDeleted={onListDeleted}
                onError={onError}
            />
            <ListInfo
                {...attributes}
                list_id={id}
                items_count={state.items_count}
                opened={state.opened}
            />

            {state.opened && (
                <div>
                    {state.loadingItems && <LoadingSpinner />}
                    <ul>
                        <ItemCreate
                            list_id={id}
                            onCreate={data => {
                                setState({
                                    ...state,
                                    items: [...state.items, data.data],
                                    items_count: state.items_count + 1
                                });
                            }}
                            onError={onError}
                        />
                        {state.items.map(element => (
                            <Item
                                key={`Item#${element.id}`}
                                {...element}
                                onError={onError}
                                onDeleteItem={id => {
                                    setState({
                                        ...state,
                                        items: [
                                            ...state.items.filter(
                                                e => e.id !== id
                                            )
                                        ],
                                        items_count: state.items_count - 1
                                    });
                                }}
                            />
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};
// class List extends React.Component {
//     constructor(props) {
//         super(props);
//         this.state = {
//             opened: false,
//             loadingItems: false
//         };
//         this.items = null;
//         this.close = this.close.bind(this);
//         this.handleClickDiv = this.handleClickDiv.bind(this);
//         this.handleDeleteClick = this.handleDeleteClick.bind(this);
//         this.handleLoadItemsSuccess = this.handleLoadItemsSuccess.bind(this);
//         this.handleLoadItemsError = this.handleLoadItemsError.bind(this);
//         this.handleRemoveListSuccess = this.handleRemoveListSuccess.bind(this);
//         this.handleRemoveListError = this.handleRemoveListError.bind(this);
//         this.handleDeleteItem = this.handleDeleteItem.bind(this);
//         this.handleCreateItem = this.handleCreateItem.bind(this);
//     }
//     handleCreateItem(data) {
//         this.items.push(data.data);
//         this.setState({ loadItems: false });
//     }
//     handleDeleteItem(id) {
//         this.items.filter(e => e.id !== id);
//         this.setState({ loadItems: false });
//     }
//     handleClickDiv(e) {
//Clicked on delete-icon
// if (e.target.closest("." + styles["delete-container"])) return;

// if (this.state.opened) {
//     //is opend
//     if (e.target.closest("." + styles["toggle-icon-container"])) {
//         //and clicked in toggle-icon
//         this.setState({ opened: false }); //Close
//     }
// } else {
//     //is closed
//     this.loadItems(); //Load items and open the list
// }
//     }
//     handleLoadItemsSuccess(data) {
//         if (data.data) {
//             this.items = data.data || [];
//             this.setState({ loadingItems: false });
//         } else if (data.errors) {
//             this.showErrors(data.errors);
//         }
//     }
//     handleLoadItemsError(err) {
//         console.log(err);
//     }
//     loadItems() {
//         this.setState({ loadingItems: true, opened: true });
//         doGET(
//             getListItemsURL(this.props.id),
//             this.handleLoadItemsSuccess,
//             this.handleLoadItemsError
//         );
//     }
//     handleDeleteClick(e) {
//         confirmAlert({
//             title: "Are you sure?",
//             message: `This action will remove #${
//                 this.props.id
//             } list permanently.`,
//             buttons: [
//                 {
//                     label: "Yes",
//                     onClick: () => this.removeList()
//                 },
//                 {
//                     label: "No"
//                 }
//             ]
//         });
//     }
//     handleRemoveListSuccess(data) {
//         if (data.status === 204) {
//             this.props.listRemoved(this.props.id);
//         } else if (data.status === 401) {
//             this.props.showErrors([
//                 { title: "Unauthorized", detail: "Error with Authentication" }
//             ]);
//         }
//     }
//     handleRemoveListError(err) {
//         console.log(err);
//     }
//     removeList() {
//         doDELETE(
//             getListURL(this.props.id),
//             this.handleRemoveListSuccess,
//             this.handleRemoveListError
//         );
//     }
//     close() {
//         this.setState({
//             opened: false
//         });
//     }
//     render() {
//         const {
//             title,
//             due_date,
//             description,
//             items_done_count,
//             items_count
//         } = this.props.attributes;
//         const id = this.props.id;
//         return (
//             <div
//                 className={
//                     styles["list-container"] +
//                     " " +
//                     (this.state.opened && styles["opened"])
//                 }
//                 onClick={this.handleClickDiv}>
//                 <div className={styles["toggle-icon-container"]}>
//                     {this.state.opened ? (
//                         <FaCompressArrowsAlt />
//                     ) : (
//                         <FaExpandArrowsAlt />
//                     )}
//                 </div>

//                 <div
//                     className={styles["delete-container"]}
//                     onClick={this.handleDeleteClick}>
//                     <FaTrashAlt />
//                 </div>

//                 <strong>{title}</strong>

//                 <span>
//                     Due date:
//                     {" " +
//                         (due_date
//                             ? new Date(due_date).toDateString()
//                             : "<empty>")}
//                 </span>

//                 <span>Items: {`${items_done_count}/${items_count}`}</span>

//                 {description && (
//                     <p>
//                         Description:{" "}
//                         {description.substr(0, 120) +
//                             (description.length > 120 && "...")}
//                     </p>
//                 )}

//                 {this.state.opened && (
//                     <div>
//                         {this.state.loadingItems ? <LoadingSpinner /> : null}
//                         <ul>
//                             <ItemCreate
//                                 list_id={id}
//                                 onCreate={this.handleCreateItem}
//                                 showErrors={this.props.showErrors}
//                             />
//                             {(this.items || []).map(element => (
//                                 <Item
//                                     key={`List#${id}_Item#${element.id}`}
//                                     {...element}
//                                     showErrors={this.props.showErrors}
//                                     onDeleteItem={this.handleDeleteItem}
//                                 />
//                             ))}
//                         </ul>
//                     </div>
//                 )}
//             </div>
//         );
//     }
// }
// export default List;
