//@author: beto0607
//generated by create_container

import React from "react";
import { Redirect } from "react-router-dom";

import Layout from "../../layouts/Layout";
import List from "../../components/List";
import ListNew from "../../components/ListNew";
import styles from "./Dashboard.module.scss";

import NotificationSystem from "../../components/NotificationSystem";
import { FaPlus } from "react-icons/fa";

import {
    checkIfUserLoggedIn,
    doGET,
    getUserListsURL,
    getUserId
} from "../../utils/utils";

class Dashboard extends React.Component {
    constructor(props) {
        super(props);
        if (!checkIfUserLoggedIn()) {
            this.state = { redirect_target: "/auth", redirect: true };
        } else {
            this.state = {
                showListNew: false,
                messages: []
            };
            this.lists = null;
            this.closeLists = this.closeLists.bind(this);
            this.handleAddButonClick = this.handleAddButonClick.bind(this);
            this.closeAddList = this.closeAddList.bind(this);
            this.listAdded = this.listAdded.bind(this);
            this.listRemoved = this.listRemoved.bind(this);
            this.handleGetUserListsSuccess = this.handleGetUserListsSuccess.bind(
                this
            );
            this.handleGetUserListsError = this.handleGetUserListsError.bind(
                this
            );
            this.showErrors = this.showErrors.bind(this);
        }
    }
    closeAddList() {
        this.setState({ showListNew: false });
    }
    redirect(to = "/auth") {
        this.setState({ redirect: true, redirect_target: to });
    }
    handleGetUserListsSuccess(data) {
        if (data.data) {
            this.lists_ref = new Array(data.data.length);
            this.lists = data.data.map((element, index) => {
                this.lists_ref[index] = React.createRef();
                return (
                    <List
                        key={`list#${element.id}`}
                        {...element}
                        ref={this.lists_ref[index]}
                        authorization_header={this.authorization_header}
                        base_url={this.props.base_url}
                        listRemoved={this.listRemoved}
                        closeLists={this.closeLists}
                    />
                );
            });
            this.setState(this.state);
        } else if (data.errors) {
            this.setState({
                messages: data.errors.map(element => {
                    return { ...element, type: "error" };
                })
            });
        } else {
            this.setState({
                messages: [
                    {
                        title: "Unkown error",
                        detail: "Try to refresh the page",
                        type: "error"
                    }
                ]
            });
        }
    }
    handleGetUserListsError(err) {
        console.log(err);
        if (err === 401) {
            this.redirect("/auth");
        } else if (err.errors) {
            this.setState({
                messages: err.errors.map(element => {
                    return { ...element, type: "error" };
                })
            });
        }
    }
    componentDidMount() {
        if (this.state.redirect) return;
        doGET(
            getUserListsURL(getUserId()),
            this.handleGetUserListsSuccess,
            this.handleGetUserListsError
        );
    }
    listAdded(data) {
        this.lists_ref.push(React.createRef());
        this.lists.push(
            <List
                key={`list#${this.lists_ref.length - 1}`}
                {...data.data}
                closeLists={this.closeLists}
                ref={this.lists_ref[this.lists_ref.length - 1]}
                authorization_header={this.authorization_header}
                base_url={this.props.base_url}
                listRemoved={this.listRemoved}
                showErrors={this.showErrors}
            />
        );
        this.setState({
            messages: [
                {
                    title: "New list:",
                    detail: String.raw`Created list #${data.data.id}`,
                    type: "good"
                }
            ]
        });
        this.closeAddList();
    }
    closeLists() {
        this.lists_ref.forEach(element => element.current.close());
    }
    handleAddButonClick() {
        this.setState({ showListNew: true });
    }
    listRemoved(id) {
        this.lists = this.lists.filter((value, index, arr) => {
            if (value.props.id === id) {
                //Removes the reference
                this.lists_ref.splice(index, 1);
                return false;
            }
            return true;
        });
        this.setState(this.state);
    }
    showErrors(errors){
        errors.forEach( element => {element.type = 'error'});
        this.setState({messages: errors});
    }
    render() {
        if (this.state.redirect) {
            return <Redirect to={this.state.redirect_target} />;
        }
        return (
            <Layout header_props={{ title: "Dashboard" }}>
                <div className={styles["dashboard-container"]}>
                    <NotificationSystem messages={this.state.messages || []} />
                    <div
                        className={styles["add-button-container"]}
                        onClick={this.handleAddButonClick}>
                        <FaPlus />
                    </div>
                    {this.state.showListNew && (
                        <ListNew
                            base_url={this.props.base_url}
                            close={this.closeAddList}
                            listAdded={this.listAdded}
                            authorization_header={this.authorization_header}
                            showErrors={this.showErrors}
                        />
                    )}
                    <div className={styles["lists-container"]}>
                        {this.lists}
                    </div>
                </div>
            </Layout>
        );
    }
}
export default Dashboard;
